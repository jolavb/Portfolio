<!-- <div class='overlay-wrap'> -->
  <div class= 'container proj-container'>
  <legend><h1> Projects </h1></legend>
    <div class='row proj-row'>
      <div class='col col-xs-12'>
        <!-- Tab Navs -->
        <ul class="nav nav-tabs" role="tablist">
          <li role="presentation" class="page-tab active">
            <a aria-controls="Intro" role="tab" data-toggle="tab" href="#Intro">Intro</a>
          </li>

          <li role="presentation" class="page-tab" >
            <a aria-controls="Grocery-Basket" role="tab" data-toggle="tab" href="#Grocery-Basket">Grocery Basket</a>
          </li>

          <li role="presentation" class="page-tab">
            <a aria-controls="OpenClinic" role="tab" data-toggle="tab" href="#OpenClinic">Open Clinic</a>
          </li>

          <li role="presentation" class="page-tab" >
            <a aria-controls="Tic-Tac" role="tab" data-toggle="tab" href="#Tic-Tac">Tic Tac Doh!</a>
          </li>
          <li role="presentation" class="page-tab" >
            <a aria-controls="JEB" role="tab" data-toggle="tab" href="#JEB">JEB File Hosting</a>
          </li>
          <li role="presentation" class="page-tab" >
            <a aria-controls="Data-Vis" role="tab" data-toggle="tab" href="#Data-Vis">D3 Data Visualizations</a>
          </li>
        </ul>

<!-- Tab panes -->
        <div class="tab-content">
      <!-- Intro -->
          <div role="tabpanel" class="tab-pane fade in active" id="Intro">

            <div class= 'well well-lg'>
            <legend> <h3>Projects Overview </h3> </legend>
            <p> &nbsp The following projects were developed over the course of a 3 month full time
            Web Development Immersive program with General Assembly. The Web Development
            Immersive Program primarily focuses on programming fundamentals, front and back
            end web development, version control via github, and team collaboration.</p>

            <p>   For each of the projects I combined my previous python, webscraping, and data
            handeling experiance (where applicable) to produce interactive sites with
            pre-populated database content.</p>

            <p>   Transforming large datasets into interactive and consumable content was so
            exiciting to me that in addition to the 4 'required' projects I dug into
            D3.js to create a few interactive Data Visualizations which may be found under
            the 'visualizations' tab. </p>

           <div class= "row projects-overview">
              <div class='col-md-3 col-sm-6'>
                <h4>Grocery Basket</h4>
                <a aria-controls="Grocery-Basket" data-toggle="tab" href="#Grocery-Basket" class="thumbnail">
                  <img src="public/grocery.png" alt="Grocery-Basket.png">
                </a>
              </div>
              <div class='col-md-3 col-sm-6'>
                <h4>Open Clinic</h4>
                <a  aria-controls="OpenClinic" role="tab" data-toggle="tab" href="#OpenClinic"class="thumbnail">
                  <img src="public/open-clinic-clean.png" alt="open-clinic-clean.png">
                </a>
              </div>
              <div class='col-md-3 col-sm-6'>
                <h4>Tic Tac Doh!</h4>
                <a aria-controls="Tic-Tac" role="tab" data-toggle="tab" href="#Tic-Tac"class="thumbnail">
                  <img src="public/doh.png" alt="doh.png">
                </a>
              </div>
              <div class='col-md-3 col-sm-6'>
                <h4>Jeb File Hosting</h4>
                <a aria-controls="JEB" role="tab" data-toggle="tab" href="#JEB" class="thumbnail">
                  <img src="public/jeb-clean.png" alt="jeb-clean.png">
                </a>
              </div>
              <div class='col-md-3 col-sm-6'>
                <h4>D3 Data Visualization</h4>
                <a aria-controls="Data-Vis" role="tab" data-toggle="tab" href="#Data-Vis" class="thumbnail">
                  <img src="public/d3.png" alt="d3.png">
                </a>
              </div>
            </div>
           </div>

          </div>
      <!-- Open Clinic -->
          <div role="tabpanel" class="tab-pane fade" id="OpenClinic">
            <div class= 'row well well-lg'>
              <div class= 'col-md-5 col-sm-12'>
                <img class= 'img img-responsive' src='public/openClinic.png'>
              </div>
              <div class= 'panel-intro panel-section col-md-7 col-sm-12'>
                <h1> Open Clinic </h1>
                <p>Search thousands of clinical trial records by phase. </br> Powered by
                  the Open Clinic API.
                </p>
                <a target="_blank" href='https://jolavb.github.io/open-clinic-client/#/studies'><button class='search btn btn-success'> Search Studies </button></a>
              </div>
              <div class= 'col-xs-12 panel-section'>
                <legend> <h3> Background</h3></legend>
                <p> Open Clinic is my General Assembly capstone project. I wanted a challenge
                and access to lots of data. While I was working with the Health Sciences Division at Oracle,
                a consitent problem was accessing bulk clinical trial data from clinicaltrials.gov and conducting analysis
                on that data. Apparently this was also a problem for the larger community
                and so an organization called the Clinical Trials Transformation Initiative (CTTI) recently began restructuring clinicaltrials.gov
                data into a postgres relational database under thier 'State of Clinical Trials' initiative. Static copies of the database(updated monthly)
                are provided by CTTI and the Open Clinic database is an extension of one of those copies.</p>

                <p> CTTI and the recently updated clinicaltrials.gov website have drastically improved access to
                  clinical trial data, but data analysis tools are still lacking. My eventual goal in developing Open Clinic is to
                  incorporate analysis tools, powered by D3 and Python, to provide researchers access to tools and visualizations of
                  clinical trial data..It's a big project and baby steps will be key.
              </p>
              <div class= 'panel-image entity-rels img-right'>
                <h4> Entity Relationships </h4>
                <a target="_blank"href="https://imgur.com/pAfJgNR"><img class='img img-responsive' src="https://i.imgur.com/pAfJgNR.png" title="source: imgur.com" /></a>
              </div>


                <h4 class='dev'> Client Development </h4>
                <p>This Ember client application queries the open-clinic-api to view,
                   search and add comments to any public clinical trial submitted to
                   clinicalTrials.gov as of January 1st, 2017 served by the api.
                   Users may sign in to search clincial trials by phase, view trial
                   information as well as comment on a specific trial.</p>
                <p>Following the pattern I established to tackle the many
                  tables and relationships included in the back-end API,
                  I added models to the ember framework one at a time.
                  Once a model had been added, I followed the Data Down,
                  Actions Up approach to fetch and pass model data down
                  to the correct componenet. Once I was satisfied with the
                  rendering and actions required for one model, I moved onto
                  related models, and finally to the search params to filter studies
                  by phase.</p>

                  <a target="_blank" href='https://github.com/jolavb/open-clinic-client'>
                    <img src='public/github.ico' class='img img-responsive github'>
                    <span>View Client Repository</span>
                  </a>

                  <h4 class='dev'> API Development</h4>

                  <p>This Rails API serves public clinical trial data to the Open-Clinic-API
                    from a postgres database containing a complete record of clinical trials
                    submitted to clinicalTrials.gov as of January 1st, 2017. The underlying database
                    was originally cloned from <a href='https://www.ctti-clinicaltrials.org/'>clinicaltrials.org</a> and extended to
                    include user authentication and user-owned resources.</p>

                  <p>I intentionally bit off more than I could chew by cloning a large existing database from
                    <a href='https://www.ctti-clinicaltrials.org/'>clinicaltrials.org</a> with
                    over 40 tabls and relationships. I have
                    taken small steps and added relationships, models,
                    routes and Controllers for 1 table at a time. I began with the
                    primary table, which all others are related; the studies table.
                    One each route was performing as anticipated, with the correct information
                    serialized, I progressed to the next table.</p>

                    <a target="_blank" href= 'https://github.com/jolavb/open-clinic-api'>
                      <img src='public/github.ico' class='img img-responsive github'>
                      <span>View API Repository</span>
                    </a>

              </div>

            </div>
          </div>
      <!-- Grocery Basket -->
          <div role="tabpanel" class="tab-pane fade" id="Grocery-Basket">
            <div class= 'row well well-lg'>
              <div class= 'col-md-5 col-sm-12'>
                <img class= 'img img-responsive' src='public/Grocery-Basket.png'>
              </div>
              <div class= 'panel-intro panel-section col-md-7 col-sm-12'>
                <h1> Grocery Basket </h1>
                <p>Browse discount grocery items from your favorite Boston </br> Area
                  Grocery Store.Powered by the Grocery-Basket API.</p>
                <a target="_blank" href='https://jolavb.github.io/Grocery-Basket/'><button class='search btn btn-success'> Browse Discounts </button></a>
              </div>
              <div class= 'col-xs-12 panel-section'>
                <legend> <h3> Background </h3></legend>
                <p>I have developed this Single Page Application out of my own frustration
                  at reliably acessing and aggregating on sale grocery items into recipies.
                  The goal of Grocery-Basket is to allow the collection and aggregation of on-sale grocery
                  items from the greater boston area into cheap and delicious recipies. Food item and store
                  html data are collected weekly and stored in a postgres db running on heroku.</p>
                  <p>This first version of Grocery-Basket allows a user to select a grocery store to
                  display and add on-sale items to thier cart. Cart items may be updated or deleted and
                  a user may use the cart as a reference while shopping at thier local grocery store.</p>
                  <img src='public/cornucopia.png' class='img img-responsive img-right'>

                  <h4 class='dev'> Client Development </h4>
                  <p> The Grocery-Basket client communicates with the Grocery-Basket API
                    to retrieve and display on-sale grocery items from select boston
                    area grocery stores. Pages are organized into handlebars templates
                    which are rendered based on user actions.
                  </p>
                  <p> Organization was key in developing the Grocery-Basket front end. Ajax
                    call success and failures often trigger the rendering of various
                    handelbars templates depending on the application state. I made use
                    of handlebars custom helpers and created several custom helpers
                    to manupulate the rendering of particular templates.
                  </p>
                  <a target="_blank" href='https://github.com/jolavb/Grocery-Basket'>
                    <img src='public/github.ico' class='img img-responsive github'>
                    <span>View Client Repository</span>
                  </a>

                  <h4 class='dev'> API Development</h4>
                  <p>This Rails API is built on top of a Postgres database containing weekly
                    web scraped grocery sale-item information. Stores and Items tables
                    are related in a one to many relationship, and Users are related to
                    Items through the cart-items table.
                  </p>
                  <p>The main challenge in developing this rails API was collecting
                    the sale-item information. I decided to develop the scraper in Python
                    since I was most familiar with the BeautifulSoup python package and could
                    leverage my experience with pandas dataframes to help relate and clean information once collected. Once the
                    scraper is finished loading data to csv's the data is imported to the database
                    via a ruby seed script. In order to be friendly to the servers hosting scraped information,
                    I set random delays (from .5 to 5 seconds) between requests.
                  </p>
                    <a target="_blank" href= 'https://github.com/jolavb/Grocery-Basket-API'>
                      <img src='public/github.ico' class='img img-responsive github'>
                      <span>View API Repository</span>
                    </a>
                </div>
            </div>
          </div>
      <!-- Tic-Tac-Doh -->
          <div role="tabpanel" class="tab-pane fade" id="Tic-Tac">
            <div class= 'row well well-lg'>
              <div class= 'col-md-5 col-sm-12'>
                <img class= 'img img-responsive' src='public/tic-tac-doe.png'>
              </div>
              <div class= 'panel-intro panel-section col-md-7 col-sm-12'>
                <h1> Tic-Tac-Doh! </h1>
                <p>Play this simpsons themed tic tac toe game and keep track of </br>
                  your wins and loses. Don't get burned!
                 </p>
                <a target="_blank" href='https://jolavb.github.io/tic-tac-doe/'><button class='nuclear btn btn-success'>Sign up to Play!  </button></a>
              </div>
              <div class= 'col-xs-12 panel-section'>
                <legend> <h3> Background </h3></legend>
                <p>Tic-Tac-Doe was the first project I submitted in the General Assembly
                Web Immersive Course. The goal was to build a front end application
                which successfully communicated with a 3rd party API to keep track of
                tic-tac-toe gameplay. After meeting  requirements for the project, I decided
                to add in a Simpsons theme and gameplay statistics. </p>
                <img src='public/homer.png' class='img img-responsive img-right'>
                <h4 class='dev'> Client Development</h4>
                <p> The Tic-Tac-Doe client was developed in javascript, jQuery and Sass. I seperated
                  coding concerns wherever possible by dividing up javascript/jquery code. For example,
                  Ajax.js is soley responsible for Ajax calls to the tic-tac-toe api enpoints and ui.js
                  is soley responsible for updating the DOM in response to various events.
                </p>
                <p>Rather than attempting to build out the html, css and game logic first
                  ( as I was tempted to do), I began by making calls to the provided API
                  in order to familiarize myself with it's methods and responses.
                  This proved extremely beneficial and helped me write game logic that
                  interacted fluidly with the api later in the process. Once I had successfully
                  called and reviewed the apis methods and responses, I began forming the game logic
                  around it. Upon encountering errors, I reviewed error codes and logged suspect
                  variables to make sure they were what I expected them to be.</p>
                  <a target="_blank" href= 'https://github.com/jolavb/tic-tac-doe'>
                    <img src='public/github.ico' class='img img-responsive github'>
                    <span>View API Repository</span>
                  </a>
              </div>
            </div>

          </div>
      <!-- Jeb -->
          <div role="tabpanel" class="tab-pane fade" id="JEB">
            <div class= 'row well well-lg'>
              <div class= 'col-md-5 col-sm-12'>
                <img class= 'img img-responsive' src='public/jeb.png'>
              </div>
              <div class='panel-intro panel-section col-md-7 col-sm-12'>
                <h1> JEB File Hosting </h1>
                <p>Upload, Edit, and View Community Uploads with JEB File Hosting.</br>
                  Powered by Amazon S3 and the JEB API.
                </p>
                <a target="_blank" href='https://gitjeb.github.io/front/'><button class='upload btn btn-success'>Sign up to Upload! </button></a>
              </div>
              <div class= 'col-xs-12 panel-section'>
                <legend> <h3> Background </h3></legend>
                <p> JEB File Hosting was a collaborative effort between me and fellow General Assembly
                  students Eliza Gerke and Brenden Moy(Team JEB). As a team, we work closely with each other
                  to brainstorm and develop features. We broke down the day's work by doing SCRUM every morning
                  and ending the day with a retro meeting. We began with the back-end api, using scripts to test
                  each CRUD. Once that was finished we worked on the front-end actions
                  and client to api communication. Lastly we added styling the site and reviewed functionality to
                  ensure we met Minimul Viable Product requirements as outlined by General Assembly. </p>
                  <p>Version control was critical in developing this project. In order to work collaborativly
                  we each maintained up to date dev and master branches. Team members checked out new branches
                  from dev and pushed thier branch once finished with thier feature. When pull requests to dev
                  were made, team members would stop what they were doing to review the code, make edits, and accept changes. </p>


                <h4 class='dev'> Client Development </h4>
                <p> The JEB client incorporates sass, jquery, handlebars and bootstrap to communicate with
                the JEB API. Code concerns are seperated granularly, with directories for Authorization actions & events
                and Upload actions & events. These actions and events then render handelbars templates. In order
                to identify file types and update UI based on the file types, we incoporated a custom handlebars helper. The
                helper checks the file mime-type and displays default images if the file-type is anything other than
                an image file.
              </p>

                  <a target="_blank" href='https://github.com/GitJeb/front'>
                    <img src='public/github.ico' class='img img-responsive github'>
                    <span>View Client Repository</span>
                  </a>


                  <h4 class='dev'> API Development</h4>
                  <img src='public/mongodb.png' class='img img-responsive img-right'>
                  <p>The JEB API was developed using node.js and is built on top of a Mongo nosql database. As we were
                    all new to Mongo DB and non-relational databases in general there was a steep learning curve. In order
                    to allow file uploads we incorporated Amazon's S3 service. When a file is uploaded via JEB the API creates
                    a unique filename (to avoid overwriting exisiting S3 files), sends an upload request to Amazon S3, and
                    stores the url, unique file name, and user file name as a new document in the Mongo DB.
                  </p>

                    <a target="_blank" href= 'https://github.com/GitJeb/back'>
                      <img src='public/github.ico' class='img img-responsive github'>
                      <span>View API Repository</span>
                    </a>
              </div>
            </div>
          </div>
      <!-- Visualizations -->
          <div role="tabpanel" class="tab-pane fade" id="Data-Vis">
            <div class= 'row well well-lg'>
              <div class= 'col-sm-12'>
                <ul class="nav nav-pills data-navpils">
                  <li role="presentation" class='wine-data'><a href="#">Wine Prices</a></li>
                  <li role="presentation" class='iris-data'><a href="#">Iris Data Set</a></li>
                  <li role="presentation" class='crime-data'><a href="#">Crime Map</a></li>
                </ul>
                <div class='loaded-data'>
                  <div class='vis-default-overlay'>
                    <div class='overlay-content'>
                      <h3> Data Driven Documents </h3>
                      <p> The following are a few visualizations I built using the powerful
                        D3.js javascript library. Select a tab to display the related
                      data visualization.</p>
                    </div>
                  <div>

                </div>
              </div>
              </div>
            </div>


          </div>

        </div>
      </div>
    </div>
</div>
</div>
